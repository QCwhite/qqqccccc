#ifndef COMMON_INCLUDE
#define COMMON_INCLUDE

#include <Libs/hlslFunction.chunk>

float nrand(float x, float y) {
  return fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453);
}

float InterleavedGradientNoise(vec2 pixCoord)
{
     float3 magic = float3(0.06711056, 0.00583715, 52.9829189);
    // vec2 frameMagicScale = vec2(2.083, 4.867);
    // pixCoord += frameCount * frameMagicScale;
    return frac(magic.z * frac(dot(pixCoord, magic.xy)));
}

float LinearEyeDepth(float depth) {
  float near = cc_nearFar.x;
  float far = cc_nearFar.y;
  float zc0 = (near-far)/near;
  float zc1 = far/near;
  vec4 bufferParams = vec4(zc0, zc1, zc0 / far, zc1 / far);
  float linearDepth = 1.0/(bufferParams.z * depth + bufferParams.w);
  return linearDepth;
}

float Linear01Depth(float depth) {
  float near = cc_nearFar.x;
  float far = cc_nearFar.y;
  float zc0 = (near-far)/near;
  float zc1 = far/near;
  vec4 bufferParams = vec4(zc0, zc1, zc0 / far, zc1 / far);
  float linearDepth = 1.0/(bufferParams.x * depth + bufferParams.y);
  return linearDepth;
}
#endif