CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%

CCProgram vs %{
  
  precision highp float;
    
  #include <legacy/decode-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;

    v_uv = a_texCoord;
  }

}%

CCProgram ubo %{
	uniform PostUBO {
		vec4 texSize;
		vec4 params;
	};
	#pragma rate inputTexture pass
	uniform sampler2D inputTexture;
}%

CCProgram fs %{
	precision highp float;
	#include <builtin/uniforms/cc-global>
	#include <legacy/output-standard>
	#include <unpack>
	#include <Libs/common>

	#define PixelSize params.x
	#define PixelRatio params.y

	in vec2 v_uv;
	#include <ubo>

	layout(location = 0) out vec4 fragColor;

	float2 RectPixelizeUV(float2 uv)
	{
		float pixelScale = 1.0 / PixelSize;
		float2 coord = float2(pixelScale * floor(uv.x / (pixelScale)), 
						(pixelScale * PixelRatio) * floor(uv.y / (pixelScale * PixelRatio)));

		return coord;
	}

	void main()
	{
		float2 uv = RectPixelizeUV(v_uv);
		fragColor = texture(inputTexture, uv);
	}
}%