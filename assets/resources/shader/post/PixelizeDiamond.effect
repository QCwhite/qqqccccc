CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%


CCProgram vs %{
  
  precision highp float;
    
  #include <legacy/decode-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;

    v_uv = a_texCoord;
  }

}%

CCProgram ubo %{
    uniform PostUBO {
        vec4 texSize;
        float PixelSize;
    };
    #pragma rate inputTexture pass
    uniform sampler2D inputTexture;
    #pragma rate depthTexture pass
    uniform sampler2D depthTexture;
}%

CCProgram fs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <unpack>
  #include <Libs/common>

  in vec2 v_uv;
  #include <ubo>

  layout(location = 0) out vec4 fragColor;

  	
  vec2 DiamondPixelizeUV(vec2 uv)
  {
    vec2 pixelSize = vec2(10. / PixelSize);
    
    vec2 coord = uv * pixelSize;
    
    //计算当前Diamond的朝向
    int direction = int(dot(frac(coord), vec2(1., 1.)) >= 1.0) + 2 * int(dot(frac(coord), vec2(1., -1.)) >= 0.0);
    
    // 进行向下取整
    coord = floor(coord);
    
    //处理Diamond的四个方向
    if (direction == 0) coord += vec2(0., 0.5);
    if(direction == 1) coord += vec2(0.5, 1.);
    if(direction == 2) coord += vec2(0.5, 0.);
    if(direction == 3) coord += vec2(1., 0.5);
    
    //最终缩放uv
    coord /= pixelSize;
    
    return coord;
  }
  
  void main () {
		vec2 uv = DiamondPixelizeUV(v_uv);
    fragColor = texture(inputTexture, uv);
  }
  
}%

