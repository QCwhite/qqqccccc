CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%

CCProgram vs %{
  
  precision highp float;
    
  #include <legacy/decode-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;

    v_uv = a_texCoord;
  }

}%

CCProgram ubo %{
  uniform PostUBO {
    vec4 texSize;
    vec4 params;
  };
  #pragma rate inputTexture pass
  uniform sampler2D inputTexture;
}%

CCProgram fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <unpack>
  #include <Libs/common>

  #define PixelSize params.x
  #define GridWidth params.y

  in vec2 v_uv;
  #include <ubo>

  layout(location = 0) out vec4 fragColor;

  float HexDist(vec2 a, vec2 b)
  {
    vec2 p = abs(b - a);
    float s = 0.5;
    float c = 0.8660254;
    
    float diagDist = s * p.x + c * p.y;
    return max(diagDist, p.x) / c;
  }

  vec2 NearestHex(float s, vec2 st)
  {
    float h = 0.5 * s;
    float r = 0.8660254 * s;
    float b = s + 2.0 * h;
    float a = 2.0 * r;
    float m = h / r;
    

    vec2 sect = st / vec2(2.0 * r, h + s);
    vec2 sectPxl = mod(st, vec2(2.0 * r, h + s));
    
    float aSection = mod(floor(sect.y), 2.0);
    
    vec2 coord = floor(sect);
    if (aSection > 0.0)
    {
      if(sectPxl.y < (h - sectPxl.x * m))
      {
        coord -= 1.0;
      }
      else if(sectPxl.y < (-h + sectPxl.x * m))
      {
        coord.y -= 1.0;
      }
    }
    else
    {
      if(sectPxl.x > r)
      {
        if(sectPxl.y < (2.0 * h - sectPxl.x * m))
        {
          coord.y -= 1.0;
        }
      }
      else
      {
        if(sectPxl.y < (sectPxl.x * m))
        {
          coord.y -= 1.0;
        }
        else
        {
          coord.x -= 1.0;
        }
      }
    }
    
    float xoff = mod(coord.y, 2.0) * r;
    return vec2(coord.x * 2.0 * r - xoff, coord.y * (h + s)) + vec2(r * 2.0, s);
  }

  void main()
  {
    //cal hexagon uv
    float pixelSize = PixelSize * cc_screenSize.x * 0.2;
    vec2 nearest = NearestHex(pixelSize, v_uv * cc_screenSize.xy);

    vec4 finalColor = texture(inputTexture, nearest / cc_screenSize.xy);

    float dist = HexDist(v_uv * cc_screenSize.xy, nearest);

    float interiorSize = pixelSize;
    float interior = 1.0 - smoothstep(interiorSize - 0.8, interiorSize, dist * GridWidth);

    fragColor = vec4(finalColor.rgb * interior, 1.0);
  }
}%