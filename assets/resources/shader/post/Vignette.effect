CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%

CCProgram vs %{

	precision highp float;

	#include <legacy/decode-standard>
	#include <builtin/uniforms/cc-global>
	#include <common/common-define>

	out vec2 v_uv;

	void main () {
		StandardVertInput In;
		CCDecode(In);
		CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
		gl_Position = In.position;
		v_uv = a_texCoord;
	}

}%

CCProgram ubo %{
	uniform PostUBO {
		vec4 params;
		vec4 params2;
	};
	#pragma rate inputTexture pass
	uniform sampler2D inputTexture;
}%

CCProgram fs %{
	precision highp float;
	#include <builtin/uniforms/cc-global>
	#include <legacy/output-standard>
	#include <unpack>
	#include <Libs/common>
	#include <Libs/shape>	

	#define _VignetteColor params2.xyz    
	#define _VignetteCenter params.xy    
	#define _VignetteIntensity params.z    
	#define _VignetteSmoothness params.w    
	#define _VignetteRoundness params2.w    

	in vec2 v_uv;
	#include <ubo>

	layout(location = 0) out vec4 fragColor;

	void main()
	{
		vec4 color = texture(inputTexture, v_uv);    
		float vfactor = UniversalMask2D(v_uv, _VignetteCenter, _VignetteIntensity, _VignetteRoundness, _VignetteSmoothness);    
		color.rgb = color.rgb * lerp(_VignetteColor, vec3(1.0), vfactor);    
		fragColor = color;  
		// fragColor = vec4(1.0);

	}
}%